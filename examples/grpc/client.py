#!/usr/bin/env python3
"""
Python gRPC client example that mocks an OpenAI answer and submits it to the Solver.

Prereqs:
  pip install grpcio grpcio-tools
  python -m grpc_tools.protoc -I proto --python_out=examples/grpc --grpc_python_out=examples/grpc proto/solver_bridge.proto

Usage:
  python examples/grpc/client.py \
    --challenge-id ch_123 \
    --job-id solver_job_ch_123 \
    --answer "MOCK_ANSWER" \
    --target localhost:9090
"""

import argparse
import os
import sys

import grpc

try:
    # Generated by grpc_tools.protoc into examples/grpc/
    import solver_bridge_pb2 as pb2
    import solver_bridge_pb2_grpc as pb2_grpc
except ImportError as e:
    sys.stderr.write(
        "\nMissing generated stubs. Run:\n"
        "  pip install grpcio grpcio-tools\n"
        "  python -m grpc_tools.protoc -I proto --python_out=examples/grpc --grpc_python_out=examples/grpc proto/solver_bridge.proto\n\n"
    )
    raise


def get_llm_answer(prompt: str) -> str:
    """Mock OpenAI call; returns a static answer if no key is set."""
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        return "MOCK_ANSWER"
    # Real call omitted; keep example self-contained
    # from openai import OpenAI
    # client = OpenAI(api_key=api_key)
    # resp = client.chat.completions.create(...)
    # return resp.choices[0].message.content.strip()
    return "MOCK_ANSWER"


def main():
    parser = argparse.ArgumentParser(description="Submit an answer to the Solver via gRPC")
    parser.add_argument("--challenge-id", required=True)
    parser.add_argument("--job-id", default="")
    parser.add_argument("--prompt", default="Solve the task")
    parser.add_argument("--answer", default="")
    parser.add_argument("--status", default="success", choices=["success", "failed"])
    parser.add_argument("--target", default="localhost:9090", help="host:port of solver gRPC bridge")
    args = parser.parse_args()

    answer = args.answer or get_llm_answer(args.prompt)

    with grpc.insecure_channel(args.target) as channel:
        stub = pb2_grpc.SolverBridgeStub(channel)
        req = pb2.SubmitAnswerRequest(
            challenge_id=args.challenge_id,
            solver_job_id=args.job_id,
            answer=answer,
            status=args.status,
        )
        resp = stub.SubmitAnswer(req, timeout=10)
        print({"accepted": resp.accepted, "message": resp.message})


if __name__ == "__main__":
    main()

